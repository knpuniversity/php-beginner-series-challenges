requestnewpage_requestpostdatamc:
    question: >
        When you go to a site, your browser makes a request for that page, and even
        sends extra information, like what language you prefer. A request to
        `pets_new.php` might look like this:

        ```
        POST /pets_new.php
        Host: localhost:8000
        Accept-Language: en-US,en;q=0.8

        pet_name=Waggy%20Pig&breed=bichon
        ```

        Which of the following most accurately describes this request?
    explanation: >
        Because this is a `POST` request to `/pets_new.php`, it's definitely a result
        of the user submitting a form - on some page - with `method="POST"` and `action="/pets_new.php"`.
        The form *might* live at `/pets_new.php`, but that's not important - the form could
        live anywhere. The important part is that it submits to `/pets_new.php`.

        The data in the bottom are the form fields. So, this form has two fields: one with
        `name="pet_name"` - that the user filled in with `Waggy Pig` - and another with `name="breed"`
        that was filled in with `bichon`.
    features:
        multiple_choice:
            choices:
                a: >
                    The user just browsed to this page, and the form will be pre-filled
                    with the data on the last line.
                b: >
                    The user surfed to `/pets_new.php` and submitted a form. The data
                    on the bottom is what they filled in for the form fields.
                c: >
                    The user just performed a search for all pets named "Waggy Pig" and breed "bichon"
                d: >
                    The user just submitted a form  with `<form action="/pets_new.php" method="POST">`
                    and the data on the bottom is what they filled in for the form fields.'
            correct: d
    grading: []

createform_postversusgetmc:
    question: >
        When you surf to a page, the user makes a GET request for that URL. When you
        submit a form, the user makes a POST request to that URL. Which of the following
        is NOT true about GET and POST requests:
    explanation: >
        Even though `POST` requests are typically used to send data, data can be sent via
        both `POST` and `GET` requests (with, for example, a `<form method="GET">` form).
        So really, there's nothing you can do with a GET request that you can't do with a
        POST request and vice-versa. But don't be confused: in practice, POST requests are
        used for almost all form submits and GET requests are used everywhere else.
    features:
        multiple_choice:
            choices:
                a: >
                    POST is used when the user needs to send data. GET is used when a user
                    just wants to fetch a page
                b: A GET request cannot send any data (i.e. filled-in form fields)
                c: >
                    After making both GET and POST requests, the server sends back a response
                    (often the next HTML page to display)
                d: >
                    There's no *real* difference between GET and POST requests: both can send data,
                    both cause a response to be returned, but *typically* POST is used to send data.
            correct: b
    grading: []

createform_createhtmlformcoding: ~
    question: >
        The pet toy business is *so* popular that we're becoming the Etsy of dog toys:
        allowing other people to post their own vintage, organic, vegan toys on our
        site to sell. Create an HTML form that submits a POST request to `/new_toy.php`
        and give it 2 fields: an input text field called `name` and a `textarea` field
        called `description`:
    step: ~
    files:
        new_toy.php: ~
    features:
        editor: ~
        browser:
            default_uri: /new_toy.php
    grading:
        look_for_form:
            type: php
            assertTrue: input("new_toy.php") matches "/<form/"
            failure: Did you create a `form` tag yet?
        check_action:
            type: http
            assertFalse: css('form').attr('action') == '/new_toy.php'
            failure: Make sure your form submits to `/new_toy.php`
        check_method:
            type: http
            assertFalse: css('form').attr('method') matches "/POST/i"
            failure: Make sure your form has a `method` attribute on your `form` set to `POST`
        check_field_name:
            type: http
            assertFalse: css('form').form().has('name')
            failure: I don't see any field with `name="name"`
        check_field_description:
            type: http
            assertFalse: css('form').form().has('description')
            failure: I don't see any field with `name="description"`

readingformdata_fetchpostdatacoding:
    question: >
        Our toy form is setup! Now, when the user submits the form, we need to capture
        the information. Set the submitted name to a `$name` variable, the description
        to a `$description` variable, then `var_dump()` both variables to see what's being
        submitted.

        Behind the scenes, we'll fill out the fields with a new toy idea we have and submit
        so you can see what the data looks like.
    step: ~
    files:
        new_toy.php: ~
    features:
        editor: ~
        browser:
            default_uri: /new_toy.php
    grading:
        look_for_echo:
            type: php
            assertTrue: input("new_toy.php") matches "/$_POST/"
            failure: I don't see `$_POST` in your file
        check_variable_1:
            type: php
            assertTrue: get_variable('name') == 'Fluffy Pig Stuffed Animal'
            failure: Make sure the `$name` variable is set to `Fluffy Pig Stuffed Animal`
        check_variable_2:
            type: php
            assertTrue: get_variable('description') == 'Your dog will *love* to chew and destroy this adorable pig!'
            failure: Make sure the `$description` variable is set to `Your dog will *love* to chew and destroy this adorable pig!`
        look_for_var_dump:
            type: php
            assertTrue: input("index.php") matches "/var_dump(/"
            failure: I don't see "var_dump()" function in your file

readingformdata_checkhttpmethodcoding:
    question: >
        Great! When you press the submit button, we're printing out whatever was entered
        into the form. Pretty soon, we'll start saving and selling the newest and loudest
        squeeky toy ever invented!

        But now, we're just surfing to the page directly and getting an error!
        Add an `if` statement around our logic so that it only runs when the user submits
        the form (i.e. makes a POST request).
    step: ~
    files:
        new_toy.php: ~
    features:
        editor: ~
        browser:
            default_uri: /new_toy.php
    grading:
        look_for_server:
            type: php
            assertTrue: input("new_toy.php") matches "/$_SERVER/"
            failure: I don't see `$_SERVER` in your file
        look_for_request_method:
            type: php
            assertTrue: input("new_toy.php") matches "/REQUEST_METHOD/"
            failure: I don't see `$_SERVER['REQUEST_METHOD']` in your file
        look_for_post:
            type: php
            assertTrue: input("new_toy.php") matches "/POST/"
            failure: Are you checking that the request method equals `POST`?

readingformdata_arraykeyexistsissetmc:
    question: What's the difference between `array_key_exists()` and `isset()`?
    explanation: >
        You can use both `array_key_exists()` and `isset()` interchangeably to see if a key
        exists on an array. `isset()` is a little shorter, so I like it.

        There *are* a few subtle differences between the two, and `isset()` can also be used
        to see if a variable has been defined. You'll learn more about that stuff later.
    features:
        multiple_choice:
            choices:
                a: There's not much difference: both do basically the same thing.
                b: >
                    `array_key_exists()` returns false if a key does not exist on an array.
                    But `isset()` returns a warning in this case.
                c: >
                    `array_key_exists()` can be used on all arrays, but `isset()` can only
                    be used with associative arrays
            correct: a
    grading: []

readingformdata_playingwithservercoding:
    question: >
        Dump the `$_SERVER` variable and run your code to figure out which key stores information
        about what browser you're using. It's OK that you'll have a wrong answer at first to
        figure this out. *Hint* The browser information is a big long string that (in this
        example) will include `Mozilla` in it.
    step: ~
    files:
        new_toy.php: ~
    features:
        editor: ~
        browser:
            default_uri: /new_toy.php
    grading:
#$htmlGrader->assertOutputContains('');
        look_for_server:
            type: php
            assertTrue: input("new_toy.php") matches "/$_SERVER/"
            failure: I don't see `$_SERVER` in your file
        look_for_request_method:
            type: php
            assertTrue: input("new_toy.php") matches "/HTTP_USER_AGENT/"
            failure: I don't see `$_SERVER['HTTP_USER_AGENT']` in your file
        look_for_post:
            type: php
            assertTrue: body("new_toy.php") matches "/Mozilla\/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit\/531.21.10/"
            failure: Are you printing the `$_SERVER['HTTP_USER_AGENT']`?
