letswritephp_openphpmc:
    question: >
        Everything in a PHP file is just HTML code at first. If you want
        to write some dynamic PHP code, you'll activate PHP mode by always
        writing this first:
    explanation: >    
        As soon as you write `<?php` you are in PHP mode. So, `<?php echo 'Hello'; ?>`
        gets you into PHP mode and executes `echo 'Hello'`. The `?>` gets
        you *out* of PHP mode, and back into normal HTML land.
    features:
        multiple_choice:
            choices:
                a: <PHP
                b: <?php
                c: ?>
                d: echo
            correct: b
    grading: []

letswritephp_simpleechocoding:
    question: >
        AirPupNMeow needs you to create their site! It's a humble beginning.
        Start by opening PHP, then echo their tag line: "I luv puppies"
        inside an `<h2>` tag.
    step: start-empty-index-php
    files:
        index.php: ~
    features:
        editor: ~
        browser: ~
    grading:
        look_for_echo:
            type: php
            assertTrue: input("index.php") matches "/echo/"
            failure: I don't see "echo" in your file
        check_output:
            type: http
            assertTrue: body() matches "/I luv puppies/"
            failure: I don't see `I luv puppies` anywhere - did you print this?
        check_h2:
            type: http
            assertTrue: css("h2:contains('I luv puppies').count() > 0")
            failure: Make sure the `I luv puppies` text is being printed *inside* an `h2` tag

letswritephp_jobofechomc:
    question: >
        What's the job of the `echo` statement?
    explanation: >
        `echo` - as in `echo 'this question was no problem';` - is used to print anything
        out. There are a few other ways to print stuff, but `echo` is by far the most important.
        You rock `echo`!
    features:
        multiple_choice:
            choices:
                a: to print things out
                b: to exit HTML mode and enter PHP mode
                c: to end the file
                d: to create a variable
            correct: a
    grading: []

letswritephp_createvariablecoding:
    question: >
        The management of AirPupNMeow is always changing its mind. To simplify
        the life of our devs, let's use a variable so that when management
        changes the tag line, we only have to update one spot. Create
        a variable called `airpupTag` and set it to the `I luv puppies` text. Then
        print this inside the `<h2>` tag.
    step: createvariable-setup-for-variable
    files:
        index.php: ~
    features:
        editor: ~
        browser: ~
    grading:
        check_variable:
            type: php
            assertTrue: get_variable('airpupTag') == 'I luv kittens'
            failure: Make sure the `$airpupTag` variable is set to `I luv kittens`
        look_for_echo:
            type: php
            assertTrue: input("index.php") matches "/echo/"
            failure: I don't see "echo" in your file
        check_output:
            type: http
            assertTrue: body() matches "/I luv puppies/"
            failure: I don't see `I luv puppies` anywhere - did you print this?
        check_h2:
            type: http
            assertTrue: css("h2:contains('I luv puppies')")
            failure: Make sure the `I luv puppies` text is being printed *inside* an `h2` tag


letswritephp_fixmissingsemicoloncoding:
    question: >
        Poor devs. Management was so excited about variables that they
        tried to edit the code themselves. We've sent the dev team for
        ice cream to make up for it. While they're gone, fix the errors
        in this file for them.
    step: fixmissingsemicolon-setup
    files:
        index.php: ~
    features:
        editor: ~
        browser: ~
    grading:
        check_output:
            type: http
            assertTrue: body() matches "/I luv puppies/"
            failure: I don't see `I luv puppies` anywhere - did you print this?
        check_h2:
            type: http
            assertTrue: css("h2:contains('I luv puppies')")
            failure: Make sure the `I luv puppies` text is being printed *inside* an `h2` tag
        check_h2_2015:
            type: http
            assertTrue: css("h2:contains('2015')")
            failure: Make sure the `2015` text is being printed *inside* an `h2` tag

functions_userandfunctioncoding:
    question: >
        It's hard to keep track of how many loveable pets we have
        at a time. To save time (read: make management happy) just print
        a random number - between 100 and 200 - for the number of tail-wagging
        pets we have available.
    step: ~
    files:
        index.php: ~
    features:
        editor: ~
        browser: ~
    grading:
        check_output:
            type: http
            assertTrue: body() matches "/I luv puppies/"
            failure: I don't see `I luv puppies` anywhere - did you print this?
        look_for_rand:
            type: php
            assertTrue: input("index.php") matches "/rand(/"
            failure: I don't see "rand()" function in your file
        check_number:
            type: http
            assertTrue: css("h3 span").text() matches "/^\s+\d+\s+$/"
            failure: Are you printing the random number inside the `span` tag?
        check_range:
            type: http
            assertTrue: 100 > css("h3 span").text() || 200 < css("h3 span").text()
            failure: Make sure the `rand()` function only returns numbers between 100 and 200

functions_reverseandlowercasecoding:
    question: >
        Someone was working at midnight, and started printing out
        things in reverse! Don't worry! We've sent them on holiday and
        now it's your job to fix things. As a challenge, see if you
        can reverse and set all characters to lowercase in one line
        using functions.
    step: ~
    files:
        index.php: ~
    features:
        editor: ~
        browser: ~
    grading:
        look_for_strrev:
            type: php
            assertTrue: input("index.php") matches "/strrev(/"
            failure: I don't see "strrev()" function in your file
        look_for_strtolower:
            type: php
            assertTrue: input("index.php") matches "/strtolower(/"
            failure: I don't see "strtolower()" function in your file
        check_output:
            type: http
            assertTrue: body() matches "/our pets are purrfectly pawesome!/"
            failure: I don't see `our pets are purrfectly pawesome!` anywhere - did you print this?

functions_nestedfunctionsmc:
    question: >
        Clearly the dev team has been drinking too much Red Bull.
        Things have gotten out of hand with all these reversed words. See if you
        can figure out what this prints:
        ```php
        <?php echo str_replace('ri', 'aa', strrev(strtolower('SQUIRREL!'))); ?>
        ```
    explanation: >
        Think about the order that things happen:
        #. `SQUIRREL!` is passed to `strtolower` and becomes `squirrel!`.
        #. `squirrel!` is passed to `strrev` and becomes `!lerriuqs`.
        #. Finally, the `ri` in `!lerriuqs` is replaced with `aa`, giving us `!leraauqs`.
    features:
        multiple_choice:
            choices:
                a: !lerriuqs
                b: !lerraaiuqs
                c: !leraauqs
                d: lerriauqs
            correct: c
    grading: []

arraysloops_createarraycoding:
    question: >
        We're testing out a new feature: find someone to walk your
        dog! At first, our boss's kids will be the three dog walkers:
        `Kitty`, `Tiger`, and `Jay`. Assign each dog walker to three
        new variables - `$walker1`, `$walker2` and `$walker3`. Then,
        put them into a `$dogWalkers` array.
    step: ~
    files:
        index.php: ~
    features:
        editor: ~
        browser: ~
    grading:
        assert_variable:
            type: php
            # @TODO Add missing `variable()` function to the PhpExpressionProvider (don't sure about failure message)
            assertTrue: variable('dogWalkers') == ['Kitty', 'Tiger', 'Jay']
            failure: Can't assert that `$dogWalkers` variable equal to the ['Kitty', 'Tiger', 'Jay'] array

arraysloops_foreachcoding:
    question: >
        The kids are ready to work! Let's advertise the new service.
        Use a `foreach` loop to print each kid's name in an `h3` tag.
        Include a `<button>Schedule me</button>` under each kid's name:
    step: ~
    files:
        index.php: ~
    features:
        editor: ~
        browser: ~
    grading:
        look_for_foreach:
            type: php
            assertTrue: input("index.php") matches "/foreach/"
            failure: I don't see `foreach` construct in your file
        check_tiger:
            type: http
            assertTrue: css("h3:contains('Tiger')")
            failure: Make sure the `Tiger` text is being printed *inside* an `h3` tag
        check_kitty:
            type: http
            assertTrue: css("h3:contains('Kitty')")
            failure: Make sure the `Kitty` text is being printed *inside* an `h3` tag
        check_jay:
            type: http
            assertTrue: css("h3:contains('Jay')")
            failure: Make sure the `Jay` text is being printed *inside* an `h3` tag
        check_zero_buttons:
            type: http
            assertTrue: css("body:contains('<button>').count() == 0")
            failure: Don\'t forget to add a `<button>Schedule me</button>` inside the `foreach` for each walker!
        check_single_button:
            type: http
            assertTrue: css("body:contains('<button>').count() == 1")
            failure: I only see 1 `<button>` - make sure to include this *inside* the `foreach` loop so that 3 are printed
        check_three_buttons:
            type: http
            assertFalse: css("body:contains('<button>').count() == 3")
            failure: There should be 3 `<button>` element exactly

arraysloops_vardumpcoding:
    question: >
        The boss is worried that one of his kids was left off the
        list! Use the `var_dump` function to show him that all three
        kids are in the array.
    step: ~
    files:
        index.php: ~
    features:
        editor: ~
        browser: ~
    grading:
        look_for_var_dump:
            type: php
            assertTrue: input("index.php") matches "/var_dump(/"
            failure: I don't see `var_dump()` function in your file
        check_tiger:
            type: http
            assertTrue: body() matches "/Kitty.+Tiger.+Jay/"
            failure: I don't see `Kitty`, `Tiger` and `Jay` text. Did you print them all?

arraysloops_arraykeysmc:
    question: >
        ```php
        $brands = array('SuperDog', 'Doggie-Os', 'Beef Bites', 'Puppy Gruel', 'Fancy Feast');
        ```
        Puppies love dinner time! Which option below will print "Puppy Gruel"?
    explanation: >
        The keys are automatically assigned, starting with *zero*. This means that
        `SuperDog` is key 0, `Doggie-Os` is key `1` and eventually `Puppy Gruel` is
        key `3`.
    features:
        multiple_choice:
            choices:
                a: echo $brands[\'Puppy Gruel\']
                b: echo $brands(4)
                c: echo $brands[4]
                d: echo $brands[3]
            correct: d
    grading: []
