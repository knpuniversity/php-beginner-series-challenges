letswritephp_openphpmc:
    question: >
        Everything in a PHP file is just HTML code at first. If you want
        to write some dynamic PHP code, you'll activate PHP mode by always
        writing this first:
    explanation: >    
        As soon as you write `<?php` you are in PHP mode. So, `<?php echo 'Hello'; ?>`
        gets you into PHP mode and executes `echo 'Hello'`. The `?>` gets
        you *out* of PHP mode, and back into normal HTML land.
    features:
        multiple_choice:
            choices:
                a: <PHP
                b: <?php
                c: ?>
                d: echo
            correct: b
    grading: []

letswritephp_simpleechocoding:
    question: >
        AirPupNMeow needs you to create their site! It's a humble beginning.
        Start by opening PHP, then echo their tag line: "I luv puppies"
        inside an `<h2>` tag.
    step: start-empty-index-php
    files:
        index.php: ~
    features:
        editor: ~
        browser: ~
    grading:
        look_for_echo:
            type: php
            assertTrue: input("index.php") matches "/echo/"
            failure: I don't see "echo" in your file
        check_output:
            type: http
            assertTrue: body() matches "/I luv puppies/"
            failure: I don't see `I luv puppies` anywhere - did you print this?
        check_h2:
            type: http
            assertTrue: css("h2:contains('I luv puppies').count() > 0")
            failure: Make sure the `I luv puppies` text is being printed *inside* an `h2` tag

letswritephp_jobofechomc:
    question: >
        What's the job of the `echo` statement?
    explanation: >
        `echo` - as in `echo 'this question was no problem';` - is used to print anything
        out. There are a few other ways to print stuff, but `echo` is by far the most important.
        You rock `echo`!
    features:
        multiple_choice:
            choices:
                a: to print things out
                b: to exit HTML mode and enter PHP mode
                c: to end the file
                d: to create a variable
            correct: a
    grading: []

letswritephp_createvariablecoding:
    question: >
        The management of AirPupNMeow is always changing its mind. To simplify
        the life of our devs, let's use a variable so that when management
        changes the tag line, we only have to update one spot. Create
        a variable called `airpupTag` and set it to the `I luv puppies` text. Then
        print this inside the `<h2>` tag.
    step: createvariable-setup-for-variable
    files:
        index.php: ~
    features:
        editor: ~
        browser: ~
    grading:
        check_variable:
            type: php
            assertTrue: get_variable('airpupTag') == 'I luv kittens'
            failure: Make sure the `$airpupTag` variable is set to `I luv kittens`
        look_for_echo:
            type: php
            assertTrue: input("index.php") matches "/echo/"
            failure: I don't see "echo" in your file
        check_output:
            type: http
            assertTrue: body() matches "/I luv puppies/"
            failure: I don't see `I luv puppies` anywhere - did you print this?
        check_h2:
            type: http
            assertTrue: css("h2:contains('I luv puppies')")
            failure: Make sure the `I luv puppies` text is being printed *inside* an `h2` tag


letswritephp_fixmissingsemicoloncoding:
    question: >
        Poor devs. Management was so excited about variables that they
        tried to edit the code themselves. We've sent the dev team for
        ice cream to make up for it. While they're gone, fix the errors
        in this file for them.
    step: fixmissingsemicolon-setup
    files:
        index.php: ~
    features:
        editor: ~
        browser: ~
    grading:
        check_output:
            type: http
            assertTrue: body() matches "/I luv puppies/"
            failure: I don't see `I luv puppies` anywhere - did you print this?
        check_h2:
            type: http
            assertTrue: css("h2:contains('I luv puppies')")
            failure: Make sure the `I luv puppies` text is being printed *inside* an `h2` tag
        check_h2_2015:
            type: http
            assertTrue: css("h2:contains('2015')")
            failure: Make sure the `2015` text is being printed *inside* an `h2` tag
